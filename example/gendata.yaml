######
# Run: 
#   1. dorisdump gendata --dbs test_db --ddl fixture --rows 100 --genconf example/gendata.yaml -Ldebug
#   2. dorisdump gendata --dbs test    --ddl fixture --rows 100 --genconf example/gendata.yaml -Ldebug
######


# Default null frequency
# null_frequency: 0


# Default generate rule of types
type:
  # default bigint range is 0 - 100
  bigint:
    min: 0
    max: 100
  date:
    min: 1997-02-16
    max: 2025-06-12
  jsonb:
    # default structure of all jsonb (use MAP or ARRAY is OK too!)
    structure: 'struct<foo:bigint>'
    # do not gen NULL for jsonb itself
    null_frequency: 0
    fields:
      # range -1 to 1, 10% NULL
      - name: foo
        min: -1
        max: 1
        null_frequency: 0.1


# tables generate rule
tables:
  - name: employees
    row_count: 100 # optional, default 1000 (specify by --rows)
    columns:
      - name: department_id
        null_frequency: 1 # 100% NULL
      - name: salary
        min: 15000.00
        max: 16000.00
      - name: hire_date
        min: "1997-01-15"
        max: "1997-01-15"

  - name: all_type_nullable
    # row_count: 100
    columns:
      - name: t_null_decimal_precision_38
        precision: 10
        scale: 3
        min: 100
        max: 102 # max is 102.999
      - name: t_str
        # All generators can have an optional result format
        # The tag (surrounded by {{ and }}) grammer is same as golang's `fmt.Sprintf()`
        format: 'substr length 1-5: {{%s}}'
        length:
          min: 1
          max: 5
        null_frequency: 0.1
      - name: datetime1
        min: "1997-01-15"
        max: "1997-01-15"


      ### Custom generator ###

      # inc generator
      - name: t_string
        format: "string-inc-{{%d}}"
        gen:
          # incrementing from 100 (default 0), step 2 (default 1)
          inc:
            start: 100
            step: 2

      # enum generator
      - name: t_null_string
        null_frequency: 0.5
        format: "What's your name? My name is {{%s}}."
        gen:
          enum: [foo, bar, foobar]
          weights: [0.2, 0.6, 0.2] # optional, the probabilities of being chosen

      # use other type's generator
      - name: t_varchar2
        # format also has some builtin tags like '{{month}}' below,
        # see `src/generator/README.md` for all template tags
        format: "year: {{%d}}, month: {{month}}"
        gen:
          type: int
          min: 1997
          max: 2097
      - name: dt_month # type is varchar but use tinyint to generate month
        format: '{{year}}{{%02d}}'
        gen:
          type: tinyint
          min: 1
          max: 12

      # Finally, the golang generator
      - name: t_varchar
        gen:
          # Must have a function named `gen` in golang code
          golang: |
            import "fmt"

            var i int
            func gen() any {
                i++
                return fmt.Sprintf("Is odd: %v.", i%2 == 1)
            }



      ### Complex type ###
      - name: t_map_varchar # map<varchar(255),varchar(255)>
        key:
          format: "key-{{%d}}"
          gen:
            # default to start from 0
            inc:
        value:
          length: {min: 20, max: 50}

      - name: t_array_string # array<text>
        length: {min: 1, max: 10}
        element:
          # custom generatot for array element
          gen:
            enum: [foo, bar, foobar]

      - name: t_struct_nested # struct<foo:text, struct_field:array<text>>
        fields:
          - name: foo
            length: 3
          - name: struct_field
            length: 10
            element:
              null_frequency: 0
              length: 2

      # JSON/JSONB/VARIANT
      - name: json1
        structure: |
          struct<
            c1: varchar(3),
            c2: struct<array_field: array<text>>, -- nested complex type (yes, you can write comment here)
            c3: boolean
          >
        fields:
          # length 1, 0% NULL
          - name: c1
            length: 1
            null_frequency: 0
          - name: c2 # struct<array_field: array<text>>>
            fields:
              - name: array_field
                length: 1
                element:
                  format: "nested array element: {{%s}}"
                  null_frequency: 0
                  length: 2

